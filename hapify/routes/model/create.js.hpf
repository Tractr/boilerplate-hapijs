'use strict';
 
/**
 * Create <<Model lower>>.
 * Returns the created <<Model lower>>.
 */
 
const Joi = require('@hapi/joi');
const Boom = require('@hapi/boom');
<<if Fields entity and not internal>>
const MongoDB = require('mongodb');
<<endif>>
 
// Validation schema for payload
const schemaObjectPublic = {
<<for Fields not restricted and not internal f>>
    <<f snake>>: <<=joiValidator(f)>>,
<<endfor>>
};
<<if Fields restricted>>
const schemaObjectAdmin = Object.assign({
    <<for Fields restricted f>>
    <<f snake>>: <<=joiValidator(f)>>,
    <<endfor>>
}, schemaObjectPublic);
<<else>>
const schemaObjectAdmin = schemaObjectPublic;
<<endif>>
 
/**
 * Define handler
 */
const handler = async (request, h) => {
 
    // Get <<Model lower>> from payload
    const payload = request.payload;

<<if Fields internal and not primary>>
 
    // Init internal fields
    <<for Fields internal and not primary i>>
    payload.<<i snake>> = <<=defaultValue(i)>>;
    <<endfor>>
<<endif>>

<<if Fields restricted and not entity>>
 
    // Init restricted fields
    <<for Fields restricted and not entity r>>
    payload.<<r snake>> = typeof request.payload.<<r snake>> !== 'undefined' ?
        request.payload.<<r snake>> : <<=defaultValue(r)>>;
    <<endfor>>
<<endif>>

<<if Fields entity and not internal>>
 
    // Convert reference fields
    <<for Fields entity and not internal r>>
        <<if r multiple>>
    payload.<<r snake>> = request.payload.<<r snake>> instanceof Array ?
        request.payload.<<r snake>>.map((i) => new MongoDB.ObjectId(i)) : <<if r ownership>>[request.auth.credentials._id]<<else>>null<<endif>>;
        <<else>>
    payload.<<r snake>> = typeof request.payload.<<r snake>> === 'string' ?
        new MongoDB.ObjectId(request.payload.<<r snake>>) : <<if r ownership>>request.auth.credentials._id<<else>>null<<endif>>;
        <<endif>>
    <<endfor>>
<<endif>>

<<for Fields password and not internal p>>
 
    // Hash <<p lower>>
    if (typeof payload.<<p snake>> !== 'undefined') {
        payload.<<p snake>> = request.server.utils.Hash.bcrypt(payload.<<p snake>>);
    }
<<endfor>>
 
    // @hook create:before-insert:<<Model kebab>>
 
    // Insertion options
    const options = { w: 'majority' };
 
    // Insert <<Model lower>> into database
<<if Fields unique>>
    let result;
    try {
        result = await request.server.db.collection('<<Model snake>>')
            .insertOne(payload, options);
    }
    catch (e) {
        // Handle duplicated key for unique indexes
        throw e.name === 'MongoError' && e.code === 11000 ?
            Boom.conflict('Duplicate key') :
            Boom.boomify(e);
    }
<<else>>
    const result = await request.server.db.collection('<<Model snake>>')
        .insertOne(payload, options);
<<endif>>
 
    if (result.insertedCount === 0) {
        throw Boom.internal('Insert error');
    }
 
    const <<Model camel>> = result.ops[0];
 
    // @hook create:after-insert:<<Model kebab>>

<<if Fields hidden>>
 
    // Delete private properties
    <<for Fields hidden p>>
    delete <<Model camel>>.<<p snake>>;
    <<endfor>>
<<endif>>
 
    return h.response(<<Model camel>>).code(201);
};
 
/**
 * Export route to create <<Model lower>>
 */
module.exports = [
    {
        method: 'POST',
        path: '/admin/<<Model kebab>>',
        config: {
            validate: { payload: Joi.object(schemaObjectAdmin) },
            description: 'Route to create <<Model lower>> as admin',
            tags: ['admin', '<<Model kebab>>', 'create'],
            auth: {
                strategy: 'session',
                scope: 'role-admin'
            }
        },
        handler
    },
<<if CreateAccess gteOwner>>
    {
        method: 'POST',
        path: '/<<Model kebab>>',
        config: {
            validate: { payload: Joi.object(schemaObjectPublic) },
            description: 'Route to create <<Model lower>>',
            tags: ['<<Model kebab>>', 'create'],
    <<if CreateAccess not guest>>
            auth: { strategy: 'session' }
    <<endif>>
        },
        handler
    }
<<endif>>
];
 
<<< 
function defaultValue(f) {
    let v = "null";
    
    if (f.ownership) {
        v = f.multiple ? "[request.auth.credentials._id]" : "request.auth.credentials._id";
    }
    else if (f.multiple) v = "[]";
    else if (f.type === "boolean") v = "false";
    else if (f.type === "string") {
        if (f.names.snake === 'role') v = "'user'";
        else v = "''";
    }
    else if (f.type === "number") v = "0";
    else if (f.type === "datetime") v = "Date.now()";
    else if (f.type === "object") v = "{}";

    return v;
}
function joiValidator(f) {
    let out = "Joi.";
    
    if (f.type === "boolean") out += "boolean()";
    else if (f.type === "string") {
        out +=  "string()";
        if (f.subtype === "email") out += ".email().lowercase()";
        else if (f.subtype === "password") out += ".min(6)";
        out +=  ".trim()";
    }
    else if (f.type === "number" || f.type === "datetime") {
        out +=  "number()";
        if (f.subtype === "latitude") out += ".min(-90).max(90)";
        else if (f.subtype === "longitude") out += ".min(-180).max(180)";
    }
    else if (f.type === "entity") out +=  "string().length(24).hex()";
    else if (f.type === "object") out +=  "object()";
    else out +=  "any()";
    
    /* Multiple and nullable */
    if (f.multiple) {
        out = `Joi.array().items(${out})`;
        
        out += f.nullable ? ".min(0)" : ".min(1).required()";
    } else {
        out += f.nullable ? ".allow(null)" : ".required()";
    }
    
    return out;
}
>>>
