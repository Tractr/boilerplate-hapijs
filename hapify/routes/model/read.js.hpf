'use strict';
 
/**
 * Read <<Model lower>>
 */
 
const Joi = require('@hapi/joi');
const Boom = require('@hapi/boom');
const MongoDB = require('mongodb');
<<if ReadAccess owner>>
const Pres = require('../../pres');
<<endif>>

<<# Includes projection if this model has private fields >>
<<if Fields hidden>>
const <<Model pascal>>Projection = require('./inc').projection;
<<endif>>

<<# Includes projections for all non-private dependencies that have private fields >>
<<for Dependencies not hidden d>>
    <<if d.f hidden>>
const <<d pascal>>Projection = require('../<<d kebab>>/inc').projection;
    <<endif>>
<<endfor>>
 
// Validation schema for params
const schema = Joi.object({
    <<PrimaryField snake>>: Joi.string().length(24).hex().required()
});
 
/**
 * Define handler
 */
const handler = async (request) => {
 
    // Get <<Model lower>> <<PrimaryField lower>>
    const <<PrimaryField snake>> = new MongoDB.ObjectId(request.params.<<PrimaryField snake>>);
 
    // Get <<Model lower>> from database
    const result = await request.server.db.collection('<<Model snake>>')
        .findOne({ <<PrimaryField snake>> }<<if Fields hidden>>, { projection: <<Model pascal>>Projection() }<<endif>>);
 
    if (!result) {
        throw Boom.notFound('<<Model capital>> not found');
    }

<<if Fields entity and not hidden>>
 
    // Convert reference fields
    await request.server.utils.Entity
        .populate(request.server.db, result, [
    <<for Fields entity and not hidden r>>
            {
                col: '<<r.m snake>>',
                prop: '<<r snake>>',
        <<if r multiple>>
                multiple: true,
        <<endif>>
        <<if r.m.f hidden>>
                projection: <<r.m pascal>>Projection()
        <<endif>>
            },
    <<endfor>>
        ]);
<<endif>>
 
    return result;
};
 
/**
 * Export route to get <<Model lower>>
 */
module.exports = [
    {
        method: 'GET',
        path: '/admin/<<Model kebab>>/{<<PrimaryField snake>>}',
        config: {
            validate: { params: schema },
            description: 'Route to get <<Model lower>> as admin',
            tags: ['admin', '<<Model kebab>>', 'read'],
            auth: {
                strategy: 'session',
                scope: 'role-admin'
            }
        },
        handler
    },
<<if ReadAccess gteOwner>>
    {
        method: 'GET',
        path: '/<<Model kebab>>/{<<PrimaryField snake>>}',
        config: {
            validate: { params: schema },
            description: 'Route to get <<Model lower>>',
            tags: ['<<Model kebab>>', 'read'],
    <<if ReadAccess not guest>>
            auth: { strategy: 'session' },
    <<endif>>
    <<if ReadAccess owner>>
            pre: [
                { method: Pres.GetEntity('<<Model snake>>', 'params.<<PrimaryField snake>>'), assign: '<<Model camel>>' },
                { method: Pres.EnsureAccess('pre.<<Model camel>>.<<for1 Fields ownership o>><<o snake>><<endfor>>') }
            ]
    <<endif>>
        },
        handler
    }
<<endif>>
];
 
