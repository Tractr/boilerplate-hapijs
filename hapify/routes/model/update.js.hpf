'use strict';
 
/**
 * Update <<Model lower>>
 */
 
const Joi = require('@hapi/joi');
const Boom = require('@hapi/boom');
const MongoDB = require('mongodb');
<<if UpdateAccess owner>>
const Pres = require('../../pres');
<<endif>>
 
// Validation schema for params
const schemaParams = Joi.object({
    <<PrimaryField snake>>: Joi.string().length(24).hex().required()
});
// Validation schema for payload
const schemaObjectPayloadPublic = {
<<for Fields not restricted and not internal f>>
    <<f snake>>: <<=joiValidator(f)>>,
<<endfor>>
};
<<if Fields restricted>>
const schemaObjectPayloadAdmin = Object.assign({
    <<for Fields restricted f>>
    <<f snake>>: <<=joiValidator(f)>>,
    <<endfor>>
}, schemaObjectPayloadPublic);
<<else>>
const schemaObjectPayloadAdmin = schemaObjectPayloadPublic;
<<endif>>
 
/**
 * Define handler
 */
const handler = async (request, h) => {
 
    // Get updates from payload
    const updates = { $set: request.payload };
 
    // Get <<Model lower>> <<PrimaryField lower>>
    const <<PrimaryField snake>> = new MongoDB.ObjectId(request.params.<<PrimaryField snake>>);

<<if Fields entity and not internal>>
 
    // Convert reference fields
    <<for Fields entity and not internal r>>
        <<if r multiple>>
    if (updates.$set.<<r snake>> instanceof Array) {
        updates.$set.<<r snake>> = updates.$set.<<r snake>>.map((i) => new MongoDB.ObjectId(i));
    }
        <<else>>
    if (typeof updates.$set.<<r snake>> === 'string') {
        updates.$set.<<r snake>> = new MongoDB.ObjectId(request.payload.<<r snake>>);
    }
        <<endif>>
    <<endfor>>
<<endif>>

<<for Fields password and not internal p>>
 
    // Hash <<p lower>>
    if (typeof updates.$set.<<p snake>> !== 'undefined') {
        updates.$set.<<p snake>> = request.server.utils.Hash.bcrypt(updates.$set.<<p snake>>);
    }
<<endfor>>
 
    // @hook update:before-update:<<Model kebab>>
 
    // Insertion options
    const options = { w: 'majority' };
 
    // Update <<Model lower>> in database
<<if Fields unique>>
    let result;
    try {
        result = await request.server.db.collection('<<Model snake>>')
            .updateOne({ <<PrimaryField snake>> }, updates, options);
    }
    catch (e) {
        // Handle duplicated key for unique indexes
        throw e.name === 'MongoError' && e.code === 11000 ?
            Boom.conflict('Duplicate key') :
            Boom.boomify(e);
    }
<<else>>
    const result = await request.server.db.collection('<<Model snake>>')
        .updateOne({ <<PrimaryField snake>> }, updates, options);
<<endif>>
 
    if (!result.matchedCount) {
        throw Boom.notFound('<<Model capital>> not found');
    }
 
    // @hook update:after-update:<<Model kebab>>
 
    return h.response().code(204);
};
 
/**
 * Export route to update <<Model lower>>
 */
module.exports = [
    {
        method: 'PATCH',
        path: '/admin/<<Model kebab>>/{<<PrimaryField snake>>}',
        config: {
            validate: {
                params: schemaParams,
                payload: Joi.object(schemaObjectPayloadAdmin).min(1)
            },
            description: 'Route to update <<Model lower>> as admin',
            tags: ['admin', '<<Model kebab>>', 'update'],
            auth: {
                strategy: 'session',
                scope: 'role-admin'
            }
        },
        handler
    },
<<if UpdateAccess gteOwner>>
    {
        method: 'PATCH',
        path: '/<<Model kebab>>/{<<PrimaryField snake>>}',
        config: {
            validate: {
                params: schemaParams,
                payload: Joi.object(schemaObjectPayloadPublic).min(1)
            },
            description: 'Route to update <<Model lower>>',
            tags: ['<<Model kebab>>', 'update'],
    <<if UpdateAccess not guest>>
            auth: { strategy: 'session' },
    <<endif>>
    <<if UpdateAccess owner>>
            pre: [
                { method: Pres.GetEntity('<<Model snake>>', 'params.<<PrimaryField snake>>'), assign: '<<Model camel>>' },
                { method: Pres.EnsureAccess('pre.<<Model camel>>.<<for1 Fields ownership o>><<o snake>><<endfor>>') }
            ]
    <<endif>>
        },
        handler
    }
<<endif>>
];
 
<<< 
function joiValidator(f) {
    let out = "Joi.";
    
    if (f.type === "boolean") out += "boolean()";
    else if (f.type === "string") {
        out +=  "string()";
        if (f.subtype === "email") out += ".email().lowercase()";
        else if (f.subtype === "password") out += ".min(6)";
        out +=  ".trim()";
    }
    else if (f.type === "number" || f.type === "datetime") {
        out +=  "number()";
        if (f.subtype === "latitude") out += ".min(-90).max(90)";
        else if (f.subtype === "longitude") out += ".min(-180).max(180)";
    }
    else if (f.type === "entity") out +=  "string().length(24).hex()";
    else if (f.type === "object") out +=  "object()";
    else out +=  "any()";
    
    /* Multiple and nullable */
    if (f.multiple) {
        out = `Joi.array().items(${out})`;
        out += f.nullable ? ".min(0)" : ".min(1)";
    } else {
        if (f.nullable) out += ".allow(null)";
    }
    
    return out;
}
>>>
