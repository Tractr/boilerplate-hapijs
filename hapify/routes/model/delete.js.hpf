'use strict';
 
/**
 * Delete <<Model lower>>
 */
 
const Joi = require('@hapi/joi');
const Boom = require('@hapi/boom');
const MongoDB = require('mongodb');
<<if RemoveAccess owner>>
const Pres = require('../../pres');
<<endif>>
 
// Validation schema for params
const schema = Joi.object({
    <<PrimaryField snake>>: Joi.string().length(24).hex().required()
});
 
/**
 * Define handler
 */
const handler = async (request, h) => {
 
    // Get <<Model lower>> <<PrimaryField lower>>
    const <<PrimaryField snake>> = new MongoDB.ObjectId(request.params.<<PrimaryField snake>>);
 
    // @hook delete:before-delete:<<Model kebab>>
    
    // Remove <<Model lower>> from database
    const result = await request.server.db.collection('<<Model snake>>')
        .deleteOne({ <<PrimaryField snake>> });
 
    if (result.deletedCount === 0) {
        throw Boom.notFound('<<Model capital>> not found');
    }
 
    // @hook delete:after-delete:<<Model kebab>>

<<if ReferencedIn>>
 
    <<for ReferencedIn m>>
        <<for m.f f>>
    // Remove references in <<m lower>> as <<f lower>>
    await request.server.db.collection('<<m snake>>')
            <<if f multiple>>
        .updateMany({ <<f snake>>: <<PrimaryField snake>> }, { $pull: { <<f snake>>: <<PrimaryField snake>> } });
            <<else>>
        .updateMany({ <<f snake>>: <<PrimaryField snake>> }, { $set: { <<f snake>>: null } });
            <<endif>>

        <<endfor>>
    <<endfor>>

<<endif>>
 
    return h.response().code(204);
};
 
/**
 * Export route to delete <<Model lower>>
 */
module.exports = [
    {
        method: 'DELETE',
        path: '/admin/<<Model kebab>>/{<<PrimaryField snake>>}',
        config: {
            validate: { params: schema },
            description: 'Route to delete <<Model lower>> as admin',
            tags: ['admin', '<<Model kebab>>', 'delete'],
            auth: {
                strategy: 'session',
                scope: 'role-admin'
            }
        },
        handler
    },
<<if RemoveAccess gteOwner>>
    {
        method: 'DELETE',
        path: '/<<Model kebab>>/{<<PrimaryField snake>>}',
        config: {
            validate: { params: schema },
            description: 'Route to delete <<Model lower>>',
            tags: ['<<Model kebab>>', 'delete'],
    <<if RemoveAccess not guest>>
            auth: { strategy: 'session' },
    <<endif>>
    <<if RemoveAccess owner>>
            pre: [
                { method: Pres.GetEntity('<<Model snake>>', 'params.<<PrimaryField snake>>'), assign: '<<Model camel>>' },
                { method: Pres.EnsureAccess('pre.<<Model camel>>.<<for1 Fields ownership o>><<o snake>><<endfor>>') }
            ]
    <<endif>>
        },
        handler
    }
<<endif>>
];
 
